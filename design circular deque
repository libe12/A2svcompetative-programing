class MyCircularDeque:

    def __init__(self, k: int):
        self.size = 0
        self.capacity = k
       
        self.head, self.tail = 0, 0
        self.queue = [None] * k

    def insertFront(self, value: int) -> bool:
        if self.size == self.capacity:
            return False
        
        
        if self.size == 0:
            
            self.queue[self.head] = value
            self.size += 1
            return True
       
        self.head = (self.head - 1) % self.capacity
        self.queue[self.head] = value
        self.size += 1

        return True

    def insertLast(self, value: int) -> bool:
        if self.size == self.capacity:
            return False
        
       
        if self.size == 0:
           
            self.queue[self.tail] = value
            self.size += 1
            return True
    
        self.tail = (self.tail + 1) % self.capacity
        self.queue[self.tail] = value
        self.size += 1
    
        return True

    def deleteFront(self) -> bool:
        if self.size == 0:
            return False
        
        self.queue[self.head] = None
        self.size -= 1
        
        if self.size == 0:
            return True
        
        self.head = (self.head + 1) % self.capacity

        return True    

    def deleteLast(self) -> bool:
        if self.size == 0:
            return False
      
        self.queue[self.tail] = None
        self.size -= 1
        
        if self.size == 0:
            return True
        
        self.tail = (self.tail - 1) % self.capacity
        
        return True

    def getFront(self) -> int:
        if self.size == 0:
            return -1
        
        return self.queue[self.head]

    def getRear(self) -> int:
        if self.size == 0:
            return -1
        
        return self.queue[self.tail]

    def isEmpty(self) -> bool:
        return self.size == 0

    def isFull(self) -> bool:
        return self.size == self.capacity
        
